Тестовое задание
Развернуть проект на Laravel версии 9.x и сделать три скрипта, а также CRUD:

Скрипт авторизации в console-части, то есть он должен быть доступен через консоль на сервере (командой php artisan command и т.д.). Принимает в параметрах логин и пароль - возвращает токен, действующий 5 минут, который нужно использовать для второго и третьего скриптов. Пользователей сгенерировать через сидер, форму регистрации и т.д. делать не нужно.
Скрипт с поддержкой как GET, так и POST, который принимает данные в формате JSON в параметре data и сохраняет их в БД возвращая идентификатор, а также время и память затраченные на обработку запроса и сохранение объекта в БД. Скрипт должен работать исключительно с аутентификацией по токену, полученному в console-части. Аутентификация должна проходить по заголовку в запросе. Для удобства тестирования необходимо сделать форму (подробнее в комментариях).
Скрипт с поддержкой как GET, так и POST, который принимает отдельными параметрами идентификатор записи с БД и код, который нужно выполнить по отношению к JSON-объекту, который после выполнения нужно обновить. Код подразумевает уже выполненный json_decode в переменную $data по отношению к объекту с БД и содержит инструкции по обновлению частей JSON-объекта, например:
$data->list->sublist[0] = 0;
$data->list->sublist[1] = 2;
Скрипт, также как и второй, должен работать исключительно с аутентификацией по токену, полученному в console-части. Аутентификация должна проходить по заголовку в запросе. Обновить объект может исключительно тот же пользователь, что его создал. Для удобства тестирования необходимо сделать форму (подробнее в комментариях).
CRUD. Отображает все сохраненные ранее объекты с возможностью удаления объектов (DELETE). Просмотр (READ) должен предусматривать формирование из объекта JSON маркированный HTML-список с поддержкой разворачивания/сворачивания отдельных элементов. Элементы списка должны включать в себя название, тип объекта и значение в случае конца иерархии объектов. Возможность создания и обновления объектов (CREATE, UPDATE) должна быть доступна исключительно во 2 и 3 скрипте с авторизацией по токену.

Комментарии:

Второй и третий скрипты должны работать как по GET, так и по POST. В связи с этим необходимо сделать форму для удобства с выбором типа запроса, а также вводом токена, который должен передаваться в заголовке.
Описание “данные в формате JSON” подразумевает любые данные в формате JSON, включая вложенные массивы во вложенных массивах либо же пустой JSON. Скрипт не должен привязываться к какому-то конкретному JSON-объекту, он должен уметь обрабатывать любые данные в формате JSON.
Подразумевается, что во 2 и 3 скрипт не могут прийти невалидные данные (неправильный JSON, некорректный код), поэтому делать валидацию параметров, за исключением проверки токена, приходящего в заголовках запроса, нет необходимости. Однако ее можно сделать на ваше усмотрение, если вы выполните все дополнительные задания.

Весь проект и ход выполнения заданий нужно выложить в репозитории на GitHub, первый коммит - базовый шаблон Laravel версии 9.x. Обязательно описать файл README.md - как запустить проект и что он делает на английском, но не машинным переводом, так как вакансия подразумевает знание английского на уровне B1+. Также нужно добавить в README.MD пример конфига Nginx или Apache для запуска проекта.

Также необходимо описать минимальный набор тестов, для того чтобы убедиться что ваше приложение работоспособно. Желательно использовать PHPUnit или Codeception.

Дополнительное задание № 1: ограничьте количество запросов к сайту определенным количеством запросов, задаваемым в конфиге и возвращайте 429, если лимит будет превышен. Задание опциональное, то есть необязательное.

Дополнительное задание № 2: добавить логирование всех запросов с выводом в админке. Формат вывода и выводимые данные на ваше усмотрение. Задание опциональное, то есть необязательное.

Дополнительное задание № 3: задеплоить проект (куда - на ваш выбор), то есть разместить его в сети и приложить в репозиторий ссылку. Задание опциональное, то есть необязательное.

Перед выполнением тестового задания составить план работ/модулей которые надо реализовать. Дать оценку времени, которое будет затрачено на каждый из пунктов. Оформить каждый пункт как отдельный коммит с осмысленным названием на английском языке. По окончанию реализации задачи записать сколько реально времени было потрачено и комментарий по необходимости.
